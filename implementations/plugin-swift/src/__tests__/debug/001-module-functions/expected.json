{
  "files": [
    {
      "name": "wrap.info.rs",
      "data": "/// NOTE: This is an auto-generated file.\n///       All modifications will be overwritten.\nuse polywrap_plugin::JSON::{from_value, json};\nuse wrap_manifest_schemas::versions::{WrapManifest, WrapManifestAbi};\n\npub fn get_manifest() -> WrapManifest {\n  WrapManifest {\n    name: \"001-module-functions\".to_string(),\n    type_: \"plugin\".to_string(),\n    version: \"0.1\".to_string(),\n    abi: from_value::<WrapManifestAbi>(json!({\n  \"moduleType\": {\n    \"kind\": 128,\n    \"methods\": [\n      {\n        \"arguments\": [\n          {\n            \"kind\": 34,\n            \"name\": \"arg1\",\n            \"required\": true,\n            \"scalar\": {\n              \"kind\": 4,\n              \"name\": \"arg1\",\n              \"required\": true,\n              \"type\": \"UInt32\"\n            },\n            \"type\": \"UInt32\"\n          },\n          {\n            \"kind\": 34,\n            \"name\": \"arg2\",\n            \"required\": true,\n            \"scalar\": {\n              \"kind\": 4,\n              \"name\": \"arg2\",\n              \"required\": true,\n              \"type\": \"Boolean\"\n            },\n            \"type\": \"Boolean\"\n          }\n        ],\n        \"kind\": 64,\n        \"name\": \"function1\",\n        \"required\": true,\n        \"return\": {\n          \"kind\": 34,\n          \"name\": \"function1\",\n          \"required\": true,\n          \"scalar\": {\n            \"kind\": 4,\n            \"name\": \"function1\",\n            \"required\": true,\n            \"type\": \"String\"\n          },\n          \"type\": \"String\"\n        },\n        \"type\": \"Method\"\n      },\n      {\n        \"arguments\": [\n          {\n            \"kind\": 34,\n            \"name\": \"arg1\",\n            \"scalar\": {\n              \"kind\": 4,\n              \"name\": \"arg1\",\n              \"type\": \"Int32\"\n            },\n            \"type\": \"Int32\"\n          },\n          {\n            \"kind\": 34,\n            \"name\": \"arg2\",\n            \"scalar\": {\n              \"kind\": 4,\n              \"name\": \"arg2\",\n              \"type\": \"Bytes\"\n            },\n            \"type\": \"Bytes\"\n          }\n        ],\n        \"kind\": 64,\n        \"name\": \"function2\",\n        \"required\": true,\n        \"return\": {\n          \"kind\": 34,\n          \"name\": \"function2\",\n          \"scalar\": {\n            \"kind\": 4,\n            \"name\": \"function2\",\n            \"type\": \"String\"\n          },\n          \"type\": \"String\"\n        },\n        \"type\": \"Method\"\n      }\n    ],\n    \"type\": \"Module\"\n  },\n  \"version\": \"0.1\"\n})).unwrap()\n  }\n}\n"
    },
    {
      "name": "types.rs",
      "data": "#![allow(unused_imports)]\n#![allow(non_camel_case_types)]\n\n// NOTE: This is an auto-generated file.\n//       All modifications will be overwritten.\nuse bytes::ByteBuf;\nuse polywrap_core::{invoker::Invoker, uri::Uri};\nuse polywrap_plugin::error::PluginError;\nuse polywrap_msgpack_serde::{\n  to_vec,\n  from_slice,\n  BigInt,\n  BigNumber,\n  JSON,\n  bytes,\n  wrappers::{\n    polywrap_bigint as bigint,\n    polywrap_json as json\n  },\n  JSONString\n};\nuse std::collections::BTreeMap;\nuse serde::{Serialize, Deserialize};\n\n// Env START //\n\n// Env END //\n\n// Objects START //\n\n// Objects END //\n\n// Enums START //\n\n// Enums END //\n\n// Imported objects START //\n\n// Imported objects END //\n\n// Imported envs START //\n\n// Imported envs END //\n\n// Imported enums START //\n\n// Imported enums END //\n\n// Imported Modules START //\n\n// Imported Modules END //\n"
    },
    {
      "name": "module.rs",
      "data": "/// NOTE: This is an auto-generated file.\n///       All modifications will be overwritten.\n\nuse std::sync::Arc;\nuse bytes::ByteBuf;\nuse polywrap_core::invoker::Invoker;\nuse polywrap_plugin::{error::PluginError, module::PluginModule};\nuse polywrap_msgpack_serde::{\n  to_vec,\n  from_slice,\n  BigInt,\n  BigNumber,\n  JSON,\n  bytes,\n  wrappers::{\n    polywrap_bigint as bigint,\n    polywrap_json as json\n  },\n  JSONString\n};\nuse std::collections::BTreeMap;\nuse serde::{Serialize, Deserialize};\nuse super::types::*;\n\n#[derive(Clone, Debug, Deserialize, Serialize)]\npub struct ArgsFunction1 {\n    pub arg1: u32,\n    pub arg2: bool,\n}\n\n#[derive(Clone, Debug, Deserialize, Serialize)]\npub struct ArgsFunction2 {\n    pub arg1: Option<i32>,\n    pub arg2: Option<ByteBuf>,\n}\n\npub trait Module: PluginModule {\n  fn function1(&mut self, args: &ArgsFunction1, invoker: Arc<dyn Invoker>) -> Result<String, PluginError>;\n\n  fn function2(&mut self, args: &ArgsFunction2, invoker: Arc<dyn Invoker>) -> Result<Option<String>, PluginError>;\n}\n"
    },
    {
      "name": "mod.rs",
      "data": "/// NOTE: This is an auto-generated file.\n///       All modifications will be overwritten.\n\npub mod types;\n#[path = \"wrap.info.rs\"]\npub mod wrap_info;\npub mod module;"
    }
  ],
  "dirs": []
}