scalar UInt
scalar UInt8
scalar UInt16
scalar UInt32
scalar Int
scalar Int8
scalar Int16
scalar Int32
scalar Bytes
scalar BigInt
scalar BigNumber
scalar JSON
scalar Map

type CustomType {
  str: String!
  optStr: String
  u: UInt!
  optU: UInt
  u8: UInt8!
  u16: UInt16!
  u32: UInt32!
  i: Int!
  i8: Int8!
  i16: Int16!
  i32: Int32!
  bigint: BigInt!
  optBigint: BigInt
  bignumber: BigNumber!
  optBignumber: BigNumber
  json: JSON!
  optJson: JSON
  bytes: Bytes!
  optBytes: Bytes
  boolean: Boolean!
  optBoolean: Boolean
  u_array: [UInt!]!
  uOpt_array: [UInt!]
  _opt_uOptArray: [UInt]
  optStrOptArray: [String]
  uArrayArray: [[UInt!]!]!
  uOptArrayOptArray: [[UInt32]]!
  uArrayOptArrayArray: [[[UInt32!]!]]!
  crazyArray: [[[[UInt32!]]!]]
  object: AnotherType!
  optObject: AnotherType
  objectArray: [AnotherType!]!
  optObjectArray: [AnotherType]
  map: Map! @annotate(type: "Map<String!, Int!>!")
  mapOfArr: Map! @annotate(type: "Map<String!, [Int!]!>!")
  mapOfObj: Map! @annotate(type: "Map<String!, AnotherType!>!")
  mapOfArrOfObj: Map! @annotate(type: "Map<String!, [AnotherType!]!>!")
  mapCustomValue: Map! @annotate(type: "Map<String!, CustomMapValue>!")
}

type AnotherType {
  prop: String
  circular: CustomType
  const: String
}

type CustomMapValue {
  foo: String!
}

type else {
  else: String!
}
